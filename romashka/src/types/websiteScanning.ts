// Website URL Scanning & Knowledge Extraction Types
// This file defines all TypeScript interfaces for the website scanning system

export interface WebsiteScanJob {
  id: string;
  user_id: string;
  project_id?: string;
  urls: string[];
  status: ScanJobStatus;
  progress_percentage: number;
  pages_found: number;
  pages_processed: number;
  scan_settings: ScanSettings;
  started_at?: string;
  completed_at?: string;
  error_details?: Record<string, any>;
  created_at: string;
}

export type ScanJobStatus = 
  | 'pending' 
  | 'scanning' 
  | 'processing' 
  | 'completed' 
  | 'failed';

export interface ScanSettings {
  maxDepth: number;
  respectRobots: boolean;
  maxPages: number;
  includeImages?: boolean;
  contentTypes?: string[];
  rateLimit?: number; // requests per second
  timeout?: number; // seconds
  userAgent?: string;
}

export interface ExtractedContent {
  id: string;
  scan_job_id: string;
  url: string;
  title?: string;
  content: string;
  content_type: ContentType;
  headings?: Record<string, any>;
  metadata?: Record<string, any>;
  word_count: number;
  processing_quality: number;
  extracted_entities?: Record<string, any>;
  created_at: string;
}

export type ContentType = 
  | 'pricing' 
  | 'faq' 
  | 'about' 
  | 'product' 
  | 'policy' 
  | 'contact' 
  | 'general';

export interface AutoGeneratedKnowledge {
  id: string;
  scan_job_id: string;
  extracted_content_id: string;
  knowledge_item_id?: string;
  auto_category: string;
  confidence_score: number;
  needs_review: boolean;
  approved: boolean;
  created_at: string;
}

export interface ScanJobLog {
  id: string;
  scan_job_id: string;
  log_level: 'info' | 'warning' | 'error';
  message: string;
  details?: Record<string, any>;
  created_at: string;
}

export interface ContentProcessingQueue {
  id: string;
  extracted_content_id: string;
  processing_status: 'pending' | 'processing' | 'completed' | 'failed';
  processing_attempts: number;
  max_attempts: number;
  scheduled_at: string;
  started_at?: string;
  completed_at?: string;
  error_message?: string;
  created_at: string;
}

// Content Processing Types
export interface PageContent {
  url: string;
  title?: string;
  content: string;
  html: string;
  metadata: PageMetadata;
  links: string[];
  images: string[];
  headings: Heading[];
  textBlocks: TextBlock[];
}

export interface PageMetadata {
  title?: string;
  description?: string;
  keywords?: string[];
  author?: string;
  language?: string;
  robots?: string;
  canonical?: string;
  ogTags?: Record<string, string>;
  twitterTags?: Record<string, string>;
}

export interface Heading {
  level: number;
  text: string;
  id?: string;
}

export interface TextBlock {
  text: string;
  tag: string;
  className?: string;
  id?: string;
}

export interface BusinessInfo {
  companyName?: string;
  description?: string;
  contactInfo: ContactInfo;
  socialMedia?: SocialMediaInfo;
  address?: Address;
  industry?: string;
  founded?: string;
  employees?: string;
}

export interface ContactInfo {
  email?: string;
  phone?: string;
  website?: string;
  contactForm?: string;
}

export interface SocialMediaInfo {
  facebook?: string;
  twitter?: string;
  linkedin?: string;
  instagram?: string;
  youtube?: string;
}

export interface Address {
  street?: string;
  city?: string;
  state?: string;
  zipCode?: string;
  country?: string;
}

// Content Classification Types
export interface PricingPlan {
  name: string;
  price: string;
  currency: string;
  billingCycle?: string;
  features: string[];
  description?: string;
  popular?: boolean;
  buttonText?: string;
}

export interface FAQ {
  question: string;
  answer: string;
  category?: string;
  tags?: string[];
}

export interface CompanyInfo {
  name: string;
  description: string;
  mission?: string;
  vision?: string;
  values?: string[];
  team?: TeamMember[];
  history?: string;
}

export interface TeamMember {
  name: string;
  title: string;
  bio?: string;
  photo?: string;
  linkedin?: string;
}

export interface Product {
  name: string;
  description: string;
  price?: string;
  features?: string[];
  specifications?: Record<string, string>;
  images?: string[];
  category?: string;
}

// Processing Result Types
export interface ProcessingResult {
  success: boolean;
  extractedContent: ExtractedContent[];
  knowledgeItems: KnowledgeItem[];
  statistics: ProcessingStatistics;
  errors?: string[];
}

export interface ProcessingStatistics {
  totalPages: number;
  successfulExtractions: number;
  failedExtractions: number;
  averageQuality: number;
  processingTime: number;
  contentTypes: Record<ContentType, number>;
}

export interface KnowledgeItem {
  id: string;
  title: string;
  content: string;
  category: string;
  tags: string[];
  confidence: number;
  source_url: string;
  created_at: string;
  updated_at: string;
}

// Scanner Configuration Types
export interface ScanConfig {
  urls: string[];
  maxDepth: number;
  maxPages: number;
  respectRobotsTxt: boolean;
  includeImages: boolean;
  contentTypes: string[];
  rateLimit?: number;
  timeout?: number;
  userAgent?: string;
}

export interface ScanProgress {
  jobId: string;
  status: ScanJobStatus;
  progress: number;
  pagesFound: number;
  pagesProcessed: number;
  currentUrl?: string;
  estimatedTimeRemaining?: number;
  errors?: string[];
}

// Content Analysis Types
export interface ContentAnalysis {
  contentType: ContentType;
  confidence: number;
  entities: ExtractedEntity[];
  sentiment: SentimentAnalysis;
  readability: ReadabilityScore;
  keywords: Keyword[];
}

export interface ExtractedEntity {
  text: string;
  type: string;
  confidence: number;
  metadata?: Record<string, any>;
}

export interface SentimentAnalysis {
  score: number; // -1 to 1
  label: 'positive' | 'negative' | 'neutral';
  confidence: number;
}

export interface ReadabilityScore {
  fleschKincaid: number;
  gunningFog: number;
  smog: number;
  colemanLiau: number;
  automatedReadability: number;
  average: number;
}

export interface Keyword {
  word: string;
  frequency: number;
  importance: number;
  category?: string;
}

// URL Validation Types
export interface UrlValidationResult {
  isValid: boolean;
  normalizedUrl?: string;
  errors?: string[];
  warnings?: string[];
  redirects?: string[];
  finalUrl?: string;
}

// Robots.txt Types
export interface RobotsTxtInfo {
  allowed: boolean;
  disallowedPaths: string[];
  crawlDelay?: number;
  sitemap?: string[];
  userAgent?: string;
}

// Rate Limiting Types
export interface RateLimitConfig {
  requestsPerSecond: number;
  maxConcurrentRequests: number;
  retryAttempts: number;
  retryDelay: number;
}

// Error Handling Types
export interface ScanError {
  url: string;
  errorType: 'network' | 'parsing' | 'robots' | 'rate_limit' | 'timeout' | 'unknown';
  message: string;
  statusCode?: number;
  retryable: boolean;
  timestamp: string;
}

// API Response Types
export interface ScanJobResponse {
  jobId: string;
  status: ScanJobStatus;
  message: string;
}

export interface ScanJobsListResponse {
  scanJobs: WebsiteScanJob[];
  totalCount: number;
  page: number;
  pageSize: number;
}

export interface ExtractedContentResponse {
  content: ExtractedContent[];
  totalCount: number;
  page: number;
  pageSize: number;
}

export interface KnowledgeGenerationResponse {
  knowledgeItems: KnowledgeItem[];
  autoGeneratedKnowledge: AutoGeneratedKnowledge[];
  statistics: ProcessingStatistics;
}

// UI State Types
export interface ScanJobState {
  currentJob?: WebsiteScanJob;
  isScanning: boolean;
  progress: number;
  logs: ScanJobLog[];
  errors: ScanError[];
}

export interface ContentReviewState {
  extractedContent: ExtractedContent[];
  selectedContent: string[];
  reviewMode: 'individual' | 'bulk';
  filters: ContentFilters;
}

export interface ContentFilters {
  contentType?: ContentType;
  qualityThreshold?: number;
  wordCountRange?: [number, number];
  dateRange?: [string, string];
  searchTerm?: string;
}

// Playground Testing Types
export interface PlaygroundTest {
  id: string;
  question: string;
  response: string;
  knowledgeSources: string[];
  confidence: number;
  feedback?: 'positive' | 'negative' | 'neutral';
  created_at: string;
}

export interface PlaygroundSettings {
  temperature: number;
  maxTokens: number;
  model: string;
  includeContext: boolean;
  showSources: boolean;
} 