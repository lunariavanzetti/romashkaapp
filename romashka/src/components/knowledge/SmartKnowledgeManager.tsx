/**
 * Smart Knowledge Base Manager - Admin Interface
 * Comprehensive management interface for integration-based knowledge generation
 * Agent 93 - ROMASHKA Knowledge Intelligence System
 */

import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import {
  Brain,
  Sync,
  Database,
  Settings,
  BarChart3,
  Clock,
  CheckCircle,
  AlertTriangle,
  Play,
  Pause,
  RefreshCw,
  Eye,
  Edit,
  Trash2,
  Download,
  Upload,
  Filter,
  Search,
  TrendingUp,
  Users,
  Package,
  DollarSign,
  Activity
} from 'lucide-react';
import { Button, Badge, Card, Tabs, TabsContent, TabsList, TabsTrigger } from '../ui';
import { knowledgeExtractor, KnowledgeGenerationResult } from '../../services/ai/knowledgeExtractor';
import { knowledgeSyncService, SyncStatus } from '../../services/ai/knowledgeSyncService';
import { contextualKnowledgeService } from '../../services/ai/contextualKnowledgeService';

interface KnowledgeStats {
  totalKnowledge: number;
  autoGenerated: number;
  byIntegration: Record<string, number>;
  byType: Record<string, number>;
  effectivenessAvg: number;
  lastSyncTimes: Record<string, Date>;
}

interface SyncJobDisplay {
  id: string;
  integration: string;
  jobType: string;
  status: string;
  recordsProcessed: number;
  recordsTotal: number;
  knowledgeGenerated: number;
  knowledgeUpdated: number;
  startedAt?: Date;
  completedAt?: Date;
  errors: string[];
}

const SmartKnowledgeManager: React.FC = () => {
  const [activeTab, setActiveTab] = useState('overview');
  const [stats, setStats] = useState<KnowledgeStats | null>(null);
  const [syncStatuses, setSyncStatuses] = useState<SyncStatus[]>([]);
  const [recentJobs, setRecentJobs] = useState<SyncJobDisplay[]>([]);
  const [isGenerating, setIsGenerating] = useState(false);
  const [selectedIntegrations, setSelectedIntegrations] = useState<string[]>(['hubspot', 'shopify', 'salesforce']);
  const [generationResults, setGenerationResults] = useState<KnowledgeGenerationResult | null>(null);
  const [searchQuery, setSearchQuery] = useState('');
  const [filterType, setFilterType] = useState('all');
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      await Promise.all([
        loadKnowledgeStats(),
        loadSyncStatuses(),
        loadRecentJobs()
      ]);
    } catch (error) {
      console.error('Error loading data:', error);
    } finally {
      setLoading(false);
    }
  };

  const loadKnowledgeStats = async () => {
    try {
      // This would be replaced with actual API call
      const mockStats: KnowledgeStats = {
        totalKnowledge: 1247,
        autoGenerated: 892,
        byIntegration: {
          hubspot: 456,
          shopify: 289,
          salesforce: 147,
          manual: 355
        },
        byType: {
          contact: 456,
          product: 289,
          deal: 147,
          order: 98,
          general: 257
        },
        effectivenessAvg: 0.847,
        lastSyncTimes: {
          hubspot: new Date(Date.now() - 1000 * 60 * 30), // 30 min ago
          shopify: new Date(Date.now() - 1000 * 60 * 45), // 45 min ago
          salesforce: new Date(Date.now() - 1000 * 60 * 60 * 2) // 2 hours ago
        }
      };
      setStats(mockStats);
    } catch (error) {
      console.error('Error loading knowledge stats:', error);
    }
  };

  const loadSyncStatuses = async () => {
    try {
      // Mock sync statuses - would be replaced with actual API call
      const mockStatuses: SyncStatus[] = [
        {
          id: '1',
          user_id: 'user1',
          integration: 'hubspot',
          last_sync_at: new Date(Date.now() - 1000 * 60 * 30),
          next_sync_at: new Date(Date.now() + 1000 * 60 * 30),
          status: 'active',
          sync_count: 24,
          error_count: 1,
          configuration: {
            userId: 'user1',
            integrations: ['hubspot'],
            syncFrequency: 60,
            autoSync: true,
            conflictResolution: 'source_wins',
            batchSize: 100,
            maxRetries: 3
          }
        },
        {
          id: '2',
          user_id: 'user1',
          integration: 'shopify',
          last_sync_at: new Date(Date.now() - 1000 * 60 * 45),
          next_sync_at: new Date(Date.now() + 1000 * 60 * 15),
          status: 'active',
          sync_count: 18,
          error_count: 0,
          configuration: {
            userId: 'user1',
            integrations: ['shopify'],
            syncFrequency: 60,
            autoSync: true,
            conflictResolution: 'source_wins',
            batchSize: 100,
            maxRetries: 3
          }
        },
        {
          id: '3',
          user_id: 'user1',
          integration: 'salesforce',
          last_sync_at: new Date(Date.now() - 1000 * 60 * 60 * 2),
          next_sync_at: new Date(Date.now() + 1000 * 60 * 60),
          status: 'error',
          sync_count: 12,
          error_count: 3,
          last_error: 'API rate limit exceeded',
          configuration: {
            userId: 'user1',
            integrations: ['salesforce'],
            syncFrequency: 120,
            autoSync: true,
            conflictResolution: 'source_wins',
            batchSize: 50,
            maxRetries: 3
          }
        }
      ];
      setSyncStatuses(mockStatuses);
    } catch (error) {
      console.error('Error loading sync statuses:', error);
    }
  };

  const loadRecentJobs = async () => {
    try {
      // Mock recent jobs - would be replaced with actual API call
      const mockJobs: SyncJobDisplay[] = [
        {
          id: '1',
          integration: 'hubspot',
          jobType: 'incremental',
          status: 'completed',
          recordsProcessed: 23,
          recordsTotal: 23,
          knowledgeGenerated: 12,
          knowledgeUpdated: 11,
          startedAt: new Date(Date.now() - 1000 * 60 * 30),
          completedAt: new Date(Date.now() - 1000 * 60 * 28),
          errors: []
        },
        {
          id: '2',
          integration: 'shopify',
          jobType: 'full_sync',
          status: 'completed',
          recordsProcessed: 156,
          recordsTotal: 156,
          knowledgeGenerated: 89,
          knowledgeUpdated: 67,
          startedAt: new Date(Date.now() - 1000 * 60 * 60),
          completedAt: new Date(Date.now() - 1000 * 60 * 55),
          errors: []
        },
        {
          id: '3',
          integration: 'salesforce',
          jobType: 'incremental',
          status: 'failed',
          recordsProcessed: 5,
          recordsTotal: 15,
          knowledgeGenerated: 0,
          knowledgeUpdated: 0,
          startedAt: new Date(Date.now() - 1000 * 60 * 120),
          completedAt: new Date(Date.now() - 1000 * 60 * 118),
          errors: ['API rate limit exceeded', 'Authentication failed']
        }
      ];
      setRecentJobs(mockJobs);
    } catch (error) {
      console.error('Error loading recent jobs:', error);
    }
  };

  const handleGenerateKnowledge = async () => {
    try {
      setIsGenerating(true);
      setGenerationResults(null);

      // This would call the actual knowledge extractor service
      const result = await knowledgeExtractor.generateAllIntegrationKnowledge('user1', {
        batchSize: 100,
        regenerateExisting: false
      });

      setGenerationResults(result);
      await loadData(); // Refresh data after generation
    } catch (error) {
      console.error('Error generating knowledge:', error);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleToggleSync = async (integration: string, enable: boolean) => {
    try {
      if (enable) {
        // Start sync
        const syncStatus = syncStatuses.find(s => s.integration === integration);
        if (syncStatus) {
          await knowledgeSyncService.startAutoSync(syncStatus);
        }
      } else {
        // Stop sync
        await knowledgeSyncService.stopAutoSync('user1', integration);
      }
      await loadSyncStatuses();
    } catch (error) {
      console.error('Error toggling sync:', error);
    }
  };

  const handleManualSync = async (integration: string) => {
    try {
      await knowledgeSyncService.performIncrementalSync('user1', integration);
      await loadData();
    } catch (error) {
      console.error('Error performing manual sync:', error);
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'active':
        return <CheckCircle className="w-4 h-4 text-green-500" />;
      case 'error':
        return <AlertTriangle className="w-4 h-4 text-red-500" />;
      case 'paused':
        return <Pause className="w-4 h-4 text-yellow-500" />;
      default:
        return <Clock className="w-4 h-4 text-gray-500" />;
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-50 text-green-700 border-green-200';
      case 'completed':
        return 'bg-green-50 text-green-700 border-green-200';
      case 'error':
      case 'failed':
        return 'bg-red-50 text-red-700 border-red-200';
      case 'running':
        return 'bg-blue-50 text-blue-700 border-blue-200';
      case 'pending':
        return 'bg-yellow-50 text-yellow-700 border-yellow-200';
      default:
        return 'bg-gray-50 text-gray-700 border-gray-200';
    }
  };

  const formatTimeAgo = (date: Date) => {
    const now = new Date();
    const diff = now.getTime() - date.getTime();
    const minutes = Math.floor(diff / (1000 * 60));
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days}d ago`;
    if (hours > 0) return `${hours}h ago`;
    if (minutes > 0) return `${minutes}m ago`;
    return 'Just now';
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-64">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-3">
          <div className="p-2 bg-blue-100 rounded-lg">
            <Brain className="w-6 h-6 text-blue-600" />
          </div>
          <div>
            <h1 className="text-2xl font-bold text-gray-900">Smart Knowledge Base</h1>
            <p className="text-gray-600">AI-powered knowledge generation from integrations</p>
          </div>
        </div>
        <div className="flex items-center space-x-3">
          <Button
            variant="outline"
            onClick={loadData}
            disabled={loading}
          >
            <RefreshCw className={`w-4 h-4 mr-2 ${loading ? 'animate-spin' : ''}`} />
            Refresh
          </Button>
          <Button
            onClick={handleGenerateKnowledge}
            disabled={isGenerating}
            className="bg-blue-600 hover:bg-blue-700"
          >
            {isGenerating ? (
              <>
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                Generating...
              </>
            ) : (
              <>
                <Play className="w-4 h-4 mr-2" />
                Generate Knowledge
              </>
            )}
          </Button>
        </div>
      </div>

      {/* Stats Overview */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Total Knowledge</p>
                <p className="text-2xl font-bold text-gray-900">{stats.totalKnowledge.toLocaleString()}</p>
              </div>
              <Database className="w-8 h-8 text-blue-500" />
            </div>
            <div className="mt-2 flex items-center text-sm">
              <TrendingUp className="w-4 h-4 text-green-500 mr-1" />
              <span className="text-green-600">{stats.autoGenerated} auto-generated</span>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Effectiveness</p>
                <p className="text-2xl font-bold text-gray-900">{(stats.effectivenessAvg * 100).toFixed(1)}%</p>
              </div>
              <BarChart3 className="w-8 h-8 text-green-500" />
            </div>
            <div className="mt-2 flex items-center text-sm">
              <Activity className="w-4 h-4 text-blue-500 mr-1" />
              <span className="text-gray-600">Average score</span>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Active Syncs</p>
                <p className="text-2xl font-bold text-gray-900">
                  {syncStatuses.filter(s => s.status === 'active').length}
                </p>
              </div>
              <Sync className="w-8 h-8 text-purple-500" />
            </div>
            <div className="mt-2 flex items-center text-sm">
              <CheckCircle className="w-4 h-4 text-green-500 mr-1" />
              <span className="text-gray-600">of {syncStatuses.length} integrations</span>
            </div>
          </Card>

          <Card className="p-6">
            <div className="flex items-center justify-between">
              <div>
                <p className="text-sm font-medium text-gray-600">Last Sync</p>
                <p className="text-2xl font-bold text-gray-900">
                  {formatTimeAgo(new Date(Math.max(...Object.values(stats.lastSyncTimes).map(d => d.getTime()))))}
                </p>
              </div>
              <Clock className="w-8 h-8 text-orange-500" />
            </div>
            <div className="mt-2 flex items-center text-sm">
              <RefreshCw className="w-4 h-4 text-blue-500 mr-1" />
              <span className="text-gray-600">Most recent</span>
            </div>
          </Card>
        </div>
      )}

      {/* Generation Results */}
      <AnimatePresence>
        {generationResults && (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            className="bg-gradient-to-r from-green-50 to-blue-50 border border-green-200 rounded-lg p-6"
          >
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Generation Complete</h3>
              <Badge className={generationResults.success ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}>
                {generationResults.success ? 'Success' : 'Partial Success'}
              </Badge>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4">
              <div className="text-center">
                <p className="text-2xl font-bold text-blue-600">{generationResults.processedCount}</p>
                <p className="text-sm text-gray-600">Records Processed</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-green-600">{generationResults.generatedCount}</p>
                <p className="text-sm text-gray-600">Knowledge Generated</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-orange-600">{generationResults.updatedCount}</p>
                <p className="text-sm text-gray-600">Knowledge Updated</p>
              </div>
              <div className="text-center">
                <p className="text-2xl font-bold text-gray-600">{(generationResults.duration / 1000).toFixed(1)}s</p>
                <p className="text-sm text-gray-600">Duration</p>
              </div>
            </div>
            {generationResults.errors.length > 0 && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-sm font-medium text-red-800 mb-2">Errors:</p>
                <ul className="text-sm text-red-700 space-y-1">
                  {generationResults.errors.slice(0, 5).map((error, index) => (
                    <li key={index}>• {error}</li>
                  ))}
                  {generationResults.errors.length > 5 && (
                    <li>• ... and {generationResults.errors.length - 5} more</li>
                  )}
                </ul>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>

      {/* Main Content Tabs */}
      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">Overview</TabsTrigger>
          <TabsTrigger value="sync">Sync Status</TabsTrigger>
          <TabsTrigger value="knowledge">Knowledge Items</TabsTrigger>
          <TabsTrigger value="analytics">Analytics</TabsTrigger>
        </TabsList>

        <TabsContent value="overview" className="space-y-6">
          {/* Integration Status Cards */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {syncStatuses.map((status) => (
              <Card key={status.id} className="p-6">
                <div className="flex items-center justify-between mb-4">
                  <div className="flex items-center space-x-3">
                    <div className={`p-2 rounded-lg ${
                      status.integration === 'hubspot' ? 'bg-orange-100' :
                      status.integration === 'shopify' ? 'bg-green-100' :
                      'bg-blue-100'
                    }`}>
                      {status.integration === 'hubspot' ? <Users className="w-5 h-5 text-orange-600" /> :
                       status.integration === 'shopify' ? <Package className="w-5 h-5 text-green-600" /> :
                       <DollarSign className="w-5 h-5 text-blue-600" />}
                    </div>
                    <div>
                      <h3 className="font-semibold text-gray-900 capitalize">{status.integration}</h3>
                      <p className="text-sm text-gray-600">{stats?.byIntegration[status.integration] || 0} items</p>
                    </div>
                  </div>
                  <Badge className={getStatusColor(status.status)}>
                    {getStatusIcon(status.status)}
                    <span className="ml-1 capitalize">{status.status}</span>
                  </Badge>
                </div>

                <div className="space-y-3">
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Last Sync:</span>
                    <span className="font-medium">{formatTimeAgo(status.last_sync_at)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Next Sync:</span>
                    <span className="font-medium">{formatTimeAgo(status.next_sync_at)}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <span className="text-gray-600">Success Rate:</span>
                    <span className="font-medium">
                      {status.sync_count > 0 ? (((status.sync_count - status.error_count) / status.sync_count) * 100).toFixed(1) : 0}%
                    </span>
                  </div>

                  {status.last_error && (
                    <div className="bg-red-50 border border-red-200 rounded-lg p-2">
                      <p className="text-xs text-red-700">{status.last_error}</p>
                    </div>
                  )}

                  <div className="flex space-x-2 pt-2">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => handleManualSync(status.integration)}
                      className="flex-1"
                    >
                      <RefreshCw className="w-3 h-3 mr-1" />
                      Sync Now
                    </Button>
                    <Button
                      size="sm"
                      variant={status.status === 'active' ? 'outline' : 'default'}
                      onClick={() => handleToggleSync(status.integration, status.status !== 'active')}
                    >
                      {status.status === 'active' ? <Pause className="w-3 h-3" /> : <Play className="w-3 h-3" />}
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {/* Recent Jobs */}
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Recent Sync Jobs</h3>
            <div className="overflow-x-auto">
              <table className="w-full text-sm">
                <thead>
                  <tr className="border-b border-gray-200">
                    <th className="text-left py-2 font-medium text-gray-600">Integration</th>
                    <th className="text-left py-2 font-medium text-gray-600">Type</th>
                    <th className="text-left py-2 font-medium text-gray-600">Status</th>
                    <th className="text-left py-2 font-medium text-gray-600">Records</th>
                    <th className="text-left py-2 font-medium text-gray-600">Knowledge</th>
                    <th className="text-left py-2 font-medium text-gray-600">Duration</th>
                    <th className="text-left py-2 font-medium text-gray-600">Started</th>
                  </tr>
                </thead>
                <tbody>
                  {recentJobs.map((job) => (
                    <tr key={job.id} className="border-b border-gray-100">
                      <td className="py-3 capitalize font-medium">{job.integration}</td>
                      <td className="py-3">
                        <Badge variant="outline" className="text-xs">
                          {job.jobType.replace('_', ' ')}
                        </Badge>
                      </td>
                      <td className="py-3">
                        <Badge className={getStatusColor(job.status)}>
                          {job.status}
                        </Badge>
                      </td>
                      <td className="py-3">{job.recordsProcessed}/{job.recordsTotal}</td>
                      <td className="py-3">
                        <span className="text-green-600">+{job.knowledgeGenerated}</span>
                        {job.knowledgeUpdated > 0 && (
                          <span className="text-orange-600 ml-1">~{job.knowledgeUpdated}</span>
                        )}
                      </td>
                      <td className="py-3">
                        {job.startedAt && job.completedAt ? (
                          `${Math.round((job.completedAt.getTime() - job.startedAt.getTime()) / 1000)}s`
                        ) : '-'}
                      </td>
                      <td className="py-3">{job.startedAt ? formatTimeAgo(job.startedAt) : '-'}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="sync" className="space-y-6">
          <Card className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900">Sync Configuration</h3>
              <Button variant="outline">
                <Settings className="w-4 h-4 mr-2" />
                Configure
              </Button>
            </div>

            <div className="space-y-6">
              {syncStatuses.map((status) => (
                <div key={status.id} className="border border-gray-200 rounded-lg p-4">
                  <div className="flex items-center justify-between mb-4">
                    <div className="flex items-center space-x-3">
                      <h4 className="font-semibold text-gray-900 capitalize">{status.integration}</h4>
                      <Badge className={getStatusColor(status.status)}>
                        {status.status}
                      </Badge>
                    </div>
                    <div className="flex space-x-2">
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleManualSync(status.integration)}
                      >
                        <RefreshCw className="w-4 h-4 mr-1" />
                        Manual Sync
                      </Button>
                      <Button
                        size="sm"
                        variant={status.status === 'active' ? 'destructive' : 'default'}
                        onClick={() => handleToggleSync(status.integration, status.status !== 'active')}
                      >
                        {status.status === 'active' ? (
                          <>
                            <Pause className="w-4 h-4 mr-1" />
                            Pause
                          </>
                        ) : (
                          <>
                            <Play className="w-4 h-4 mr-1" />
                            Resume
                          </>
                        )}
                      </Button>
                    </div>
                  </div>

                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <p className="text-gray-600">Sync Frequency</p>
                      <p className="font-medium">{status.configuration.syncFrequency} minutes</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Batch Size</p>
                      <p className="font-medium">{status.configuration.batchSize} records</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Total Syncs</p>
                      <p className="font-medium">{status.sync_count}</p>
                    </div>
                    <div>
                      <p className="text-gray-600">Error Count</p>
                      <p className="font-medium text-red-600">{status.error_count}</p>
                    </div>
                  </div>

                  {status.last_error && (
                    <div className="mt-4 bg-red-50 border border-red-200 rounded-lg p-3">
                      <p className="text-sm font-medium text-red-800">Last Error:</p>
                      <p className="text-sm text-red-700 mt-1">{status.last_error}</p>
                    </div>
                  )}
                </div>
              ))}
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="knowledge" className="space-y-6">
          {/* Search and Filter */}
          <Card className="p-4">
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <div className="relative">
                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
                  <input
                    type="text"
                    placeholder="Search knowledge items..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>
              </div>
              <div className="flex space-x-2">
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                >
                  <option value="all">All Types</option>
                  <option value="contact">Contacts</option>
                  <option value="product">Products</option>
                  <option value="deal">Deals</option>
                  <option value="order">Orders</option>
                </select>
                <Button variant="outline">
                  <Filter className="w-4 h-4 mr-2" />
                  Filter
                </Button>
              </div>
            </div>
          </Card>

          {/* Knowledge Items List */}
          <Card className="p-6">
            <div className="flex items-center justify-between mb-6">
              <h3 className="text-lg font-semibold text-gray-900">Knowledge Items</h3>
              <div className="flex space-x-2">
                <Button variant="outline">
                  <Download className="w-4 h-4 mr-2" />
                  Export
                </Button>
                <Button variant="outline">
                  <Upload className="w-4 h-4 mr-2" />
                  Import
                </Button>
              </div>
            </div>

            <div className="text-center py-12 text-gray-500">
              <Database className="w-12 h-12 mx-auto mb-4 text-gray-400" />
              <p>Knowledge items will be displayed here</p>
              <p className="text-sm">Generate knowledge from your integrations to see items</p>
            </div>
          </Card>
        </TabsContent>

        <TabsContent value="analytics" className="space-y-6">
          {/* Analytics Charts */}
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Knowledge by Integration</h3>
              <div className="space-y-3">
                {stats && Object.entries(stats.byIntegration).map(([integration, count]) => (
                  <div key={integration} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${
                        integration === 'hubspot' ? 'bg-orange-500' :
                        integration === 'shopify' ? 'bg-green-500' :
                        integration === 'salesforce' ? 'bg-blue-500' :
                        'bg-gray-500'
                      }`}></div>
                      <span className="capitalize text-gray-700">{integration}</span>
                    </div>
                    <span className="font-semibold text-gray-900">{count}</span>
                  </div>
                ))}
              </div>
            </Card>

            <Card className="p-6">
              <h3 className="text-lg font-semibold text-gray-900 mb-4">Knowledge by Type</h3>
              <div className="space-y-3">
                {stats && Object.entries(stats.byType).map(([type, count]) => (
                  <div key={type} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <div className="w-3 h-3 rounded-full bg-purple-500"></div>
                      <span className="capitalize text-gray-700">{type}</span>
                    </div>
                    <span className="font-semibold text-gray-900">{count}</span>
                  </div>
                ))}
              </div>
            </Card>
          </div>

          {/* Performance Metrics */}
          <Card className="p-6">
            <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h3>
            <div className="text-center py-12 text-gray-500">
              <BarChart3 className="w-12 h-12 mx-auto mb-4 text-gray-400" />
              <p>Analytics charts will be displayed here</p>
              <p className="text-sm">Performance metrics and usage analytics</p>
            </div>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default SmartKnowledgeManager;